# üß† CONDI√á√ïES EM PYTHON
'''
Em toda linguagem de programa√ß√£o precisamos de condi√ß√µes para tomarmos uma decis√£o.
Condi√ß√µes nada mais s√£o, do que senten√ßas para descobrir se a l√≥gica √© VERDADEIRA ou FALSA.

Imagina que voc√™ est√° a criar o sistema de compras de uma loja online. Os clientes fazem compras e, dependendo do valor total,
podem ganhar fretes gr√°tis.

A regra da loja √© simples:
Se o valor total da compra for igual ou superior a 10.000 kz, o frete ser√° gratuito.
Se for menos, o frete custar√° 1.000 kz.

Como as condi√ß√µes entram nesse cen√°rio?
  Voc√™ precisa de um mecanismo inteligente dentro do programa que:
  Verifique o valor total da compra do cliente;
  Compare esse valor com o limite de 10.000 kz;
  E escolher o que fazer:
    Se a condi√ß√£o for satisfeita (compra >= 10.000 kz ): aplicar fretes gr√°tis.
    Se a condi√ß√£o n√£o for satisfeita (compra < 10.000 kz): adicionar fretes de 1.000 kz.

Por que √© importante?
 Sem condi√ß√µes, o sistema trataria todas as compras do mesmo jeito, o que quebraria a l√≥gica da programa√ß√£o.
 Com as cond√ß√µes, o programa decide o que fazer co base em regras, tornando-se inteligente, √∫til e justo.

Moral:
 As condi√ß√µes tornam o programa capaz de tomar decis√µes, igual a um ser humano.
 Elas s√£o o cora√ß√£o da l√≥gica de qualquer aplica√ß√£o interativa
'''



'''
numeroUm == 1
numeroDois == 2
S√≠mbolo | Descri√ß√£o        | Exemplos
==      | IGUAL            | numero1 == numero2
        |                  | False
        |                  |
!=     | DIFERENTE         | numeroUm != numeroDois
        |                  | True
        |                  |
<       | MENOR            | numeroUm < numeroDois
        |                  | True  
        |                  |          
<=      | MENOR OU IGUAL   | numeroTres <= numeroQuatro
        |                  | True
        |                  |
>       | MAIOR            | numeroUm > numeroDois
        |                  | False
        |                  |
>=      | MAIOR OU IGUAL   | numeroTres >= numeroQuatro
        |                  |True
'''

# == (Igual) Verifica se os dois elementos s√£o iguais ou n√£o, se for igual retorna VERDADEIRO se n√£o volta FALSO;
# != (Diferente) Verifica se os dois elementos s√£o diferentes ou n√£o, se for diferente retorna VERDADEIRO se n√£o volta FALSO;
# < (Menor) Caso o primeiro elemento seja menor que o segundo retorna VERDADEIRO, caso contr√°rio retorna FALSO;
# <= (Menor Igual) Caso o primeiro elemento seja MENOR ou IGUAL ao segundo elemento retorna Verdadeiro, se n√£o volta FALSO;
# > (Maior) Caso o primeiro elemento seja MAIOR que o segundo retorna VERDADEIRO, se n√£o retorna FALSO;
# >= (Maior igual) Caso o primeiro elemento seja MAIOR ou IGUAL ao segundo retorno VERDADEIRO, se n√£o retorna FALSO.

# Por que usamos condi√ß√µes?
# Validar dados
# Fazer perguntas ao usu√°rio e responder de acordo
# Controlar o fluxo do programa
# Criar Interatividade

# Estrutura b√°sica
# if condi√ß√£o:
    # C√≥digo se a condi√ß√£o for verdadeira

# Mas tamb√©m podemos usar:
    # if condi√ß√£o:
         # c√≥digo se for verdadeiro
    # elif outra condi√ß√£o:
         # c√≥digo se a primeira n√£o for verdadeira, mas essa sim
    # else:
       # c√≥digo se nenhuma das anteriores for verdadeira

print("\n")

# Exemplo simples com if
idade = 20
if idade > 18:
    print("Voc√™ √© maior de idade.")

# Exemplo com if...else
idade = 16
if idade > 18:
    print("Voc√™ √© maior de idade.")
else:
    print("Voc√™ √© menor de idade")

# Exemplo com if...elif...else
nota = 65
if nota >= 90:
    print("Excelente")
elif nota >= 70:
    print("Bom")
else:
    print("Reprovado")

# Conclus√£o
# Use if para a primeira verifica√ß√£o.
# Use elif para quantas condi√ß√µes intermedi√°rias forem necess√°rias.
# Use else opcionalmente para o caso final, quando nenhuma das condi√ß√µes anteriores for verdadeira.

# O papel de if, elif e else
'''
if
Aqui testamos uma condi√ß√£o. Se for verdadeira, o bloco de c√≥digo √© executado.
      if idade >= 18
         print("Maior de idade")

elif
√â uma nova condi√ß√£o que s√≥ √© verificada se o if anterior for falso.
      elif idade >= 13
        print("Adolescente")
        
Podemos ter quantos elif forem necess√°rios, dependendo das possibilidades que queremos testar.


else
N√£o recebe condi√ß√£o.
O else entra automaticamente quando nenhuma das condi√ß√µes anteriores (if e elif) for satisfeita.
√â como um "plano B" autom√°tico, um caminho final padr√£o para quando tudo o que foi testado antes de falhar.

      else
        print("Crian√ßa")        
'''

# Por que o else n√£o recebe condi√ß√£o?
'''
Porque ele n√£o precisa testar nada. Ele s√≥ existe para lidar com todos os casos que n√£o se enquadram nas condi√ß√µes anteriores.
Isso torna o c√≥digo mais limpo, evita repetir condi√ß√µes, e serve como uma garantia de respostas final.
'''

print("\n")

# Exemplo completo
idade1 = 10
if idade1 >= 18:
    print("Adulta")
elif idade1 >= 13:
    print("Adolescente")
else:
    print("Crian√ßa")

# Nesse caso:
# Se idade for 18 ou mais, "imprime adulta";
# Se idade for 13 ou mais, imprime "Adolescente";
# Se nenhuma dessas for verdadeira (como √© o caso com idade 10), o else assume automaticamente e imprime "Crian√ßa"